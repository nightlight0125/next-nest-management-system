// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Unit {
  id        String   @id @default(cuid())
  name      String
  users     User[]
  currentYearMonthUnitPerformances   CurrentYearMonthUnitPerformance[]

  createdAt DateTime @default(now())

  @@map("units")
}

model User {
  id       String @id @default(cuid())
  username String @unique 
  password String 
  unitId   String?
  unit     Unit?    @relation(fields: [unitId], references: [id])
  roleId   String?
  role     Role?   @relation(fields: [roleId], references: [id]) 
  currentYearMonthUnitPerformances CurrentYearMonthUnitPerformance[] @relation("CreatePerson")
  editedCurrentYearMonthUnitPerformances CurrentYearMonthUnitPerformance[] @relation("EditPerson")
  auditedCurrentYearMonthUnitPerformances CurrentYearMonthUnitPerformance[] @relation("AuditPerson")
  createdAt DateTime @default(now())

  @@map("users")
}

model Role {
  id          String      @id @default(cuid())
  name        String   @unique
  users       User[] 
  //menus       Menu[]  
  roleMenus   RoleMenu[] 

  createdAt DateTime @default(now())

  @@map("roles")
}

model Menu {
  id          String   @id @default(cuid())
  name        String
  path        String   @unique
  description String?
  roleMenus   RoleMenu[]

  //roles       Role[]

  createdAt   DateTime @default(now())

  @@map("menus")
}

model RoleMenu {
  roleId String
  menuId String
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@id([roleId, menuId]) 
  @@map("role_menus")    
}

model SelfCheckedDepartment {
  id          String   @id @default(cuid())
  yearMonth   String
  unitTotal               Int
  numberOfSelfCheckedUnits Int
  lastUpdateTime          DateTime @updatedAt
  currentYearMonthUnitPerformances CurrentYearMonthUnitPerformance[]

  createTime  DateTime @default(now())

  @@map("performance_summaries")
}

model CurrentYearMonthUnitPerformance {
  id                      String   @id @default(cuid())
  unit                    Unit     @relation(fields: [unitId], references: [id])
  unitId                  String
  createPersonId          String
  selfCheckedDepartmentId String
  selfCheckedDepartment   SelfCheckedDepartment @relation(fields: [selfCheckedDepartmentId], references: [id], onDelete: Cascade)
  wordFile                String?
  createPerson            User     @relation("CreatePerson", fields: [createPersonId], references: [id])
  editPersonId            String?
  editPerson              User?     @relation("EditPerson", fields: [editPersonId], references: [id])
  auditPersonId           String?
  auditPerson             User?     @relation("AuditPerson", fields: [auditPersonId], references: [id])
  yearMonth               String
  remark                  String?
  selfCheckedScore        Int
  perUnitSelfCheckedCondition Json
  examinationCondition    Json?
  reviewStateOfPerformanceTeam Json?

  createdAt               DateTime @default(now())

  @@map("current_year_month_unit_performances")
}
